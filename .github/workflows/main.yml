name: CI

on: [push, pull_request]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: rm rust-toolchain
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    - name: Check code format
      run: cd rust && cargo fmt -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, riscv32, riscv64, aarch64, mipsel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: git submodule update --init --recursive
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2020-01-17
        components: rust-src, llvm-tools-preview

    - name: Set musl toolchain name for non-mipsel
      if: matrix.arch != 'mipsel'
      run: |
        export FILE="${{ matrix.arch }}-linux-musl-cross"
    - name: Set musl toolchain name for mipsel
      if: matrix.arch == 'mipsel'
      run: |
        export FILE="${{ matrix.arch }}-linux-musln32-cross"

    - name: Set musl toolchain file for linux
      if: runner.os == 'linux'
      run: |
        export URL="https://musl.cc/$FILE.tgz"
    - name: Set musl toolchain file for macOS
      if: runner.os != 'linux'
      run: |
        export URL="https://mac.musl.cc/$FILE.tgz"

    - name: Setup musl toolchain
      run: |
        wget $URL;
        tar -xf $FILE.tgz;
        export PATH=$PATH:$PWD/$FILE/bin;
    
    - name: Setup cargo-xbuild
      run: |
        - rustup component add rust-src
        - (test -x $HOME/.cargo/bin/cargo-xbuild || cargo install cargo-xbuild)

    - name: Compile
      run: make tar arch=${{ matrix.arch }} mode=release
    - name: Build kernel
      run: cd kernel && make build ARCH=${{ matrix.arch }} && cd ..
